# Pythonで標準装備されていない多重集合(重複する値を保持でき, 順序も意識できる)
# __init__のmax_queryに注意
# XORでも使えるらしい？
# ABC217 D- Cutting Woods (https://atcoder.jp/contests/abc217/submissions/41176250)
# 鉄則本A55 Set (https://atcoder.jp/contests/tessoku-book/submissions/41177665)

class BinaryTrie:   # (https://kanpurin.hatenablog.com/entry/2021/12/22/001854)
    def __init__(self, max_query=2*10**5, bitlen=30):
        n = max_query * bitlen
        self.nodes = [-1] * (2 * n)
        self.cnt = [0] * n
        self.id = 0
        self.bitlen = bitlen
    
    #全体のサイズ
    def size(self):
        return self.cnt[0]
 
    # 値xの個数
    def count(self,x):
        pt = 0
        for i in range(self.bitlen-1,-1,-1):
            y = x>>i&1
            if self.nodes[2*pt+y] == -1:
                return 0
            pt = self.nodes[2*pt+y]
        return self.cnt[pt]
 
    # 値xの挿入
    def insert(self,x):
        pt = 0
        for i in range(self.bitlen-1,-1,-1):
            y = x>>i&1
            if self.nodes[2*pt+y] == -1:
                self.id += 1
                self.nodes[2*pt+y] = self.id
            self.cnt[pt] += 1
            pt = self.nodes[2*pt+y]
        self.cnt[pt] += 1
 
    # 値xの削除
    # 値xが存在しないときは何もしない
    def erase(self,x):
        if self.count(x) == 0:
            return
        pt = 0
        for i in range(self.bitlen-1,-1,-1):
            y = x>>i&1
            self.cnt[pt] -= 1
            pt = self.nodes[2*pt+y]
        self.cnt[pt] -= 1
 
    # 昇順x番目の値(1-indexed)
    def kth_elm(self,x):
        assert 1 <= x <= self.size()
        pt, ans = 0, 0
        for i in range(self.bitlen-1,-1,-1):
            ans <<= 1
            if self.nodes[2*pt] != -1 and self.cnt[self.nodes[2*pt]] > 0:
                if self.cnt[self.nodes[2*pt]] >= x:
                    pt = self.nodes[2*pt]
                else:
                    x -= self.cnt[self.nodes[2*pt]]
                    pt = self.nodes[2*pt+1]
                    ans += 1
            else:
                pt = self.nodes[2*pt+1]
                ans += 1
        return ans
 
    # 値x以上の最小要素が昇順何番目か(1-indexed)
    # 値x以上の要素がない時はsize+1を返す
    def lower_bound(self,x):
        pt, ans = 0, 1
        for i in range(self.bitlen-1,-1,-1):
            if pt == -1: break
            if x>>i&1 and self.nodes[2*pt] != -1:
                ans += self.cnt[self.nodes[2*pt]]
            pt = self.nodes[2*pt+(x>>i&1)]
        return ans

"""
bt = BinaryTrie()
bt.insert(4)
bt.insert(3)
bt.insert(7)
bt.insert(7)
bt.insert(5)
print(bt.size())  # 5
print(bt.count(7))  # 2
print(bt.kth_elm(3)) # 5   昇順で並べたときに3番目(1番目, 2番目...の数え方)になる値は5 
print(bt.lower_bound(1)) # 1  値1以上の最小要素は,値3になり, 値3は昇順で1番目(1番目, 2番目...の数え方)。 
"""