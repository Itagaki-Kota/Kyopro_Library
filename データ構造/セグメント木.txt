【セグメント木】
鉄則本p324-
配列のある値の更新 O(logN)                         (更新クエリ)
ある区間内の最大値, 最小値, 総和を求める O(logN)   (回答クエリ)


セグ木のA[0]とかが空いていても大丈夫なので 『問題文のindexの通りに』実装するのがよさそう！




※再帰回数オーバーでREに注意 
import sys
sys.setrecursionlimit(10 ** 6)


※ 
・インデックスまわりに留意
・セグ木の各セル dat[i]の初期値に留意
・更新クエリのときに左下と右下のセルから, どのように更新するか(max, min, 和)
・回答クエリのときにセルが「一切含まれない場合」の返り値      (Maximumなら極端に小さい値, Minimumなら極端に大きい値, RSQなら0)
・回答クエリの返り値 (max, min, 和)


RMQ(Range Maximum Query)  (鉄則本A58) (https://atcoder.jp/contests/tessoku-book/submissions/39937363)
                          ☆(ACL 非再帰)(https://atcoder.jp/contests/tessoku-book/submissions/51249526)
                            Atoder以外の環境での、ACLセグ木のベタ貼りはこのファイルの最下部に記載。

RMQ(Range Minimum Query)  (鉄則本B58) (https://atcoder.jp/contests/tessoku-book/submissions/39979622)
O(N**2)の1次元DP(長さN, 遷移N)をセグ木で高速化。
貰うDPにした途端に見通しが良くなる。
セグ木の最下段である, (見かけ上の) A[i]がdp配列になる。
実際には A[i]はZ.dat[i + Z.size]に対応している。

RSQ(Range Sum Query)      (鉄則本A59) (https://atcoder.jp/contests/tessoku-book/submissions/39947255)
                          (鉄則本B59) (https://atcoder.jp/contests/tessoku-book/submissions/40078652) 
                          (順列の転倒数をO(NlogN)で求める)(順列でないならば, 入力配列をLとしたとき, Z = Segtree(max(L))として, セグ木の最下段の長さを十分に確保する?)
　　　　　　　　　　　　　(-> 非順列の場合, 配列の長さは小さくても, 極端に大きい値が含まれると, TLEするのでは？)



※LISやLDSもセグ木で良いのでは...？



import typing

class SegTree:
    def __init__(self,
                 op: typing.Callable[[typing.Any, typing.Any], typing.Any],
                 e: typing.Any,
                 v: typing.Union[int, typing.List[typing.Any]]) -> None:
        self._op = op
        self._e = e

        if isinstance(v, int):
            v = [e] * v

        self._n = len(v)
        self._log = self._ceil_pow2(self._n)
        self._size = 1 << self._log
        self._d = [e] * (2 * self._size)

        for i in range(self._n):
            self._d[self._size + i] = v[i]
        for i in range(self._size - 1, 0, -1):
            self._update(i)

    def set(self, p: int, x: typing.Any) -> None:
        assert 0 <= p < self._n

        p += self._size
        self._d[p] = x
        for i in range(1, self._log + 1):
            self._update(p >> i)

    def get(self, p: int) -> typing.Any:
        assert 0 <= p < self._n

        return self._d[p + self._size]

    def prod(self, left: int, right: int) -> typing.Any:
        assert 0 <= left <= right <= self._n
        sml = self._e
        smr = self._e
        left += self._size
        right += self._size

        while left < right:
            if left & 1:
                sml = self._op(sml, self._d[left])
                left += 1
            if right & 1:
                right -= 1
                smr = self._op(self._d[right], smr)
            left >>= 1
            right >>= 1

        return self._op(sml, smr)

    def all_prod(self) -> typing.Any:
        return self._d[1]

    def max_right(self, left: int,
                  f: typing.Callable[[typing.Any], bool]) -> int:
        assert 0 <= left <= self._n
        assert f(self._e)

        if left == self._n:
            return self._n

        left += self._size
        sm = self._e

        first = True
        while first or (left & -left) != left:
            first = False
            while left % 2 == 0:
                left >>= 1
            if not f(self._op(sm, self._d[left])):
                while left < self._size:
                    left *= 2
                    if f(self._op(sm, self._d[left])):
                        sm = self._op(sm, self._d[left])
                        left += 1
                return left - self._size
            sm = self._op(sm, self._d[left])
            left += 1

        return self._n

    def min_left(self, right: int,
                 f: typing.Callable[[typing.Any], bool]) -> int:
        assert 0 <= right <= self._n
        assert f(self._e)

        if right == 0:
            return 0

        right += self._size
        sm = self._e

        first = True
        while first or (right & -right) != right:
            first = False
            right -= 1
            while right > 1 and right % 2:
                right >>= 1
            if not f(self._op(self._d[right], sm)):
                while right < self._size:
                    right = 2 * right + 1
                    if f(self._op(self._d[right], sm)):
                        sm = self._op(self._d[right], sm)
                        right -= 1
                return right + 1 - self._size
            sm = self._op(self._d[right], sm)

        return 0

    def _update(self, k: int) -> None:
        self._d[k] = self._op(self._d[2 * k], self._d[2 * k + 1])
        

    def _ceil_pow2(self, n: int) -> int:
        x = 0
        while (1 << x) < n:
            x += 1
    
        return x
    

# 非再帰のセグ木 ACL (https://github.com/not522/ac-library-python/blob/master/atcoder/segtree.py)
N, Q = map(int, input().split())
A = [0 for _ in range(N)]

# Range Max Query
def op(s, t):
    return max(s, t)
e = -1  # 単位元


# Range Min Query
#def op(s, t):
#    return min(s, t)
#e = 10**20  # inf


# Range Sum Query
#def op(s, t):
#    return s + t
#e = 0


Z = SegTree(op, e, A)   # Z = SegTree(op, e, A)で、そのままリストAを渡すなら、下記のsetしていく過程は必要なし。

#for i in range(N):
#    Z.set(i, A[i])  # Z[i] に 値をセット  Z[0]～Z[N-1]

#for i in range(N):
#    print(Z.get(i)) # Z[i] の 値をゲット  Z[0]～Z[N-1]
  
#print(Z.prod(0, 4))  # Z[0]からZ[3]までの演算結果  Z.prod(l, r)の演算結果は [l, r) であることに注意。


for _ in range(Q):
    Q_type, inp1, inp2 = map(int, input().split())
    
    if Q_type == 1:
      pos, x = inp1, inp2
      pos -= 1  # セグ木のために0-index化
      Z.set(pos, x)
    
    elif Q_type == 2:
      L, R = inp1, inp2
      L -= 1  # セグ木のために0-index化
      R -= 1  # セグ木のために0-index化
      print(Z.prod(L, R))  # # Z[L]からZ[R - 1]までのクエリ
