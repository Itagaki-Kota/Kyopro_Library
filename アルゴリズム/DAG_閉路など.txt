【DAG (Directed Acyclic Graph)(有向非巡回グラフ)】 連結成分.txt の 強連結成分分解も参照
【実装も下に書いてあるよ！！】

・閉路(有向サイクル)が無い
・トポロジカルソートが存在する(PAST本 p202)　<= 強連結成分の個数 = 頂点数 になれば, トポロジカルソートが存在。




【サイクル(閉路)】(「連結な」単純グラフ)(非連結ならば, 連結成分ごとに考えればよい)

<無向グラフの閉路検出>
(「連結・単純・無向」なので) N頂点に対して, N - 1辺ならば木になり, サイクル無し。

ABC231 - D Neighbors (https://atcoder.jp/contests/abc231/submissions/39303866)
単純無向グラフにおいて,
・次数が3以上の頂点が存在 -> 不可　　(<- 今回の問題設定)
・閉路が存在              -> 不可
閉路の有無は
連結成分にグループ分けして, 各連結成分ごとに,辺の数 = 頂点数 - 1 を満たすか(木であるか)を判定。


(有向グラフの閉路検出)
有向グラフの有向サイクルとは, 例えばa->b->c->a のようなもの。(a->b, a->c, b->d, c->d みたいなものはサイクルではない)
有向グラフのサイクルは, 木判定では判別できない。
(有向木ではない => 有向サイクルを持つ が成立しない)
(有向木ではないが, 有向サイクルを持たない例が存在するため(a->b, c->b))
(有向木とは,ただ一つ存在するソース(入次数0)を根とし, 各頂点へのパスが一通りしか存在しないものを言う。)
(だから, 有向サイクルを持たない => 有向木　は成立しない。)(有向木 => 有向サイクルを持たない は成立する。)



有向グラフでトポロジカルソートが存在 　　　-> 閉路が無い (DAGである)
有向グラフでトポロジカルソートが存在しない -> 閉路が有る

ABC223 -D Restricted Permutation
トポロジカルソートが存在するかを判定(グラフ全体が非連結であってもよい)
トポロジカルソートは強連結成分分解でも出来るし, トポロジカルソートの具体例を一つ出力するのもできる。
しかし、辞書順最小になるトポロジカルソートは...？


ABC291 E- Find Permutations(https://atcoder.jp/contests/abc291/submissions/39285614)(想定解は「トポロジカルソートが一意」だそうだが)
PAST本p201の「DAGにおける各頂点を始点としたときの, 最長パスの長さ」を利用。








アルゴ式>アルゴリズム上級>グラフ探索　の「トポロジカルソート」や「サイクル検出」を参照。

# 有向グラフのトポロジカルソート。非連結でもよい。
import sys
sys.setrecursionlimit(10**7) # 再帰上限に注意。

N, M = map(int, input().split())
G = [[] for _ in range(N)] # 0-index
for _ in range(M):
    to_vid, from_vid = map(int, input().split())
    to_vid -= 1
    from_vid -= 1
    G[from_vid].append(to_vid)

# トポロジカルソート #
def rec(v):
    vis[v] = True
    for ne_v in G[v]:
        if vis[ne_v]:
            if not finished[ne_v]:
                print(-1)  # 有向サイクルあり
                exit()
            continue
        rec(ne_v)
        
    finished[v] = True
    Order.append(v)

Order = []
vis = [False for _ in range(N)]
finished = [False for _ in range(N)]  # 帰りがけ順で探索を終えたか

for v in range(N):  # この順番でなくてもよい
    if vis[v]:
        continue
    rec(v)

Order.reverse()
print(*Order)  # 頂点番号のトポロジカルソート順。
