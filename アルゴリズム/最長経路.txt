【DAGではない場合】
辺のコストに-1をかけてベルマン・フォード or ワーシャルフロイド法 で最短経路長問題にして解く。
辺のコストに-1をかけることで、その最短経路長が-17と計算されたら, 元のグラフ最長経路長は17である。

ダイクストラ法は辺に負のコストがあると使用不可。

ベルマン・フォード or ワーシャルフロイド も「負閉路(コストの総和が負になるサイクル)があると使用不可」。
なぜなら, 
負閉路を永遠に回り続けることでいくらでもコストを小さくできるため。
これは最長経路問題でいうところの
「コストの総和が正になる閉路が存在したら最長経路問題に解は無い」のと同じ。
コストの総和が正になる閉路を永遠に回り続ければ, コストはいくらでも大きくなってしまうため。


【DAG】
DAGの最長経路問題はベルマンやワーシャルを使わなくても, もっと簡単に解ける。
あと, DAGにおいてはそもそも閉路が存在しないので(コストの総和が正になる閉路も存在せず), 解が存在することは明らか。

トポロジカルソートしたDAGにおいて, 一番左の頂点からDPしていけばO(M)で終わる。


例)
必ず頂点番号の小さい方から大きい方へ辺が伸びているようなDAG( = 頂点番号の小さいほうからトポロジカルソートされている)において
頂点1から頂点Nへのパスが存在して, その最長経路長を求めたい。 (グラフが連結とは限らない)

    dp = [None for _ in range(N + 1)]  # dp[i]:=頂点1から頂点iへの最長コスト  先頭はダミー
    dp[1] = 0
    
    for from_id in range(1, N):
        if dp[from_id] == None:  # (特にここに注意！！！ 頂点1から到達不可能な頂点だった場合)
            continue
        for to_id, wei in G[from_id]:
            
            if dp[to_id] == None:
                dp[to_id] = dp[from_id] + wei
            else:
                dp[to_id] = max(dp[to_id], dp[from_id] + wei)


(問題で与えられるグラフがDAGだと気づけるか？)
・例えば ui < vi　(必ず頂点番号の小さい方から大きい方へ辺が伸びている)などの制約が見つかれば, それはDAG。


ABC 324 F Beautiful Path
https://atcoder.jp/contests/abc324/submissions/46872683
・平均値(濃度)最大化は式変形して答えを二分探索  (二分探索の適切な範囲の考察)
・DAGに気づいた上での最長路問題
・辺のコストを等倍して誤差対策 (制約考えて, 何倍にするかの考察)